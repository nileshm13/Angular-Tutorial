TypeScript:
.filter and .find can be used in 2 ways:
1. Callback should have a return statement specified
eg: this.students.filter((student)=>{
	return student.gender === 'Male'
    });
2. Fat-arrow does not require a return statement
eg: this.students.filter(student=>
	 student.gender === 'Male'
    );

Angular is a JS Framework which allows to create SPA.
In earlier frameworks, whenever user navigated to a new page, a request was sent to server and based on URL, specific HTML was sent back. With SPA, there's only 1 HTML file being shown all the time namely index.html, only content inside it change as JS is loaded dynamically, no request to server made. This results in faster page load and reactive, if data is required from server, request can be made without making web page unresponsive, once data is loaded, display it. 
Node JS and Angular CLI are required for Angular to run.

Commands:
Create a folder where you want to contain the project and open that in VS Code
ng new angular-ekart	//creates a new angular project
cd .\angular-ekart 	//switch to new folder created by Angular for eKart project
ng serve		//compiles Angular project, generates bundles for JS and CSS FILES AND OPEN LIVE DEV SERVER
ng build		//Builds angular project and generates a folder named dist, it has an index.html which lists all the static js bundles generated dynamically on ng serve, ex: main.js(js compiled verison of ts), runtime.js (web pack application), pollyfills.js(bckwrd compatible), vendor.js (angular core and other 3rd party libraries bundled in js), styles.css (bundles into styles.js)

When ng serve is executed, it runs index.html file on web server, and injects few bundles such as runtime.js and main.js in script tag, can be seen by rt click -> view page source in browser


Angular Files and Folder Structure:
Node modules -> Third party libraries to be used in project, neither we deploy to Prod nor push it in Git repo, anyone who needs it within team use npm install.
package.json -> Has 2 sections, dependencies -> specifies all 3rd party libraries required in project, devDependencies -> dependencies required for development in angukar like cli, jasmine, typescript, etc. npm install looks here to identify what needs to be installed.
.editorconfig -> Define coding standards rules.
.gitignore ->  Files/Folders to be ignored while pushing to git
angular.json -> All the information about current angular project such as styles, scripts, index html file location, main ts file location etc 
package-lock -> Ensures same version of libraries are getting installed in all the libraries
tsconfig -> Settings for Typescript compiler to run angular project, strict check for angular variables is assigned here in strict property.
src/assets -> All static files such as images, text, icons, etc and they are public in nature so can be accessed by browser. Keep all public things here.
favicon.ico -> The icon rendered in browser tab, replace it with your projects icon.
main.ts -> starting point of Angular application, bootstraps app Module
styles.css -> global css files to be declared here.

Angular Starting point:
Angular CLI uses WebPack which is a bundler to scan for JS and other files in our application and merges them into one or more bundles. Then it injects them into index.html. This ensures by the time index.html is loaded in browser, all 3rd party libraries and angular core libraries are also bundled and loaded. (see ng build section under commands)  
Defined in angular.json -> options -> main which points to main.ts (see img Angular app staring point)
App.module.ts has arrays like:
decalarations -> all the components, directives, pipes, etc are added here.
imports	-> all the external modules required by app.module
providers -> all the services are registered here
bootstrap -> which components angular should load when app module is loaded
exports -> When we need to make a component of a feature module available in another module, for example when we create a feature module, all its component needs to be exported so that when app module imports feature module, it can recognize it.

Module: Its basic building block of an angular application. Angular scans app.module.ts to look for all the component, directive, pipes, etc. being used in the project. Create a class and decorate it with @NgModule decorator.

Component: 
Has a selector, template(direct HTML, messy, compile time error can't be caught) or templateUrl and styles or stylesUrl.
Any style applied on app.component.html will not get applied on header.component.html as styles are applied at folder level.
For external fonts to be added, use @import.... code in syles.css which can be obtained from google fonts, same goes for font-awesome
To use bootstrap, first install and save it using npm install --save bootstrap  (use @versionNo just after bootStrap without space for downloading a specific version), installation can be verified from node modules folder . Then add it either in styles.css using import statement or in angular.json, styles array by adding path of bootstrap.min.css file, this makes bootstrap available for styling. Ensure you run the app again before using bootstrap as app needs to be built for bootstrap library to be available. (Lecture 11)

Selector:
Selector in a component can also be used as an attribute or a css class or an id.
For it to be used as an attribute, define it in [] like selector: '[top-header]', now instead of html element it acts as an attribute like 
<div top-header></div>
For it to be used as a css class, define it with a . like selector: '.top-header', now instead of html element it acts as a class like 
<div class = "top-header"></html> ; similarly for id, use #
Selector is always used as an element in angular, above is just for knowledge. However, for directives, it acts as attribute.


Data Binding:
One way data binding: String interpolation, data and event binding 
Two way data binding: [(ngModel)]
Sting Interpolation: used to display some data in html
Data binding: used to display dynamic content in html, like img [src] = "path", instead of [], can also use bind-, like bind-value or bind-disabled however its not used much. There are some attributes(see img) which cannot be used in property binding like aria-hidden,colspan, etc., for them use attr keyword like [attr.aria-hidden]="". string interpolation cannot be used for disabled, hidden, checked, hence data-binding used there.
In order to use NgModel, we need to import FormsModule in app.module.ts in "imports" array
For one way data binding, check the commit one way data binding as file is altered after that, this commit has mobile example with cart inc/dec

Directives:
It is used to manipulate DOM, Chnage appearance or behaviour and to add/remove elements from DOM.
3 Types:
1. Component: It is the only type which has a view template associated with it, decorated with @Component decorator.
2. Attribute: Can be added as an attribute like ngClass and ngStyle, it is used to change the appearance or behaviour of elements in DOM, can be used along with a conditional statement, one can also create a custom directive. Need to declare using @Directive declaration with selector specified in square brackets as its an attribute
@Directive({
selector : '[changeToGreen]'
})
Then in HTML, can use as an attribute like <div changeToGreen></div>
3.Structural Directive: These are used to add/remove element from DOM, always has a * before directive name, common ones include *ngFor, *ngIf, [ngSwitch]

<a *ngFor = "let menu of mainMenuItems" href = "#">{{ menu }}</a>
<div class="ekart-on-sale-tag" *ngIf="prod.discountPrice">{{ (100 - ((prod.discountPrice / prod.price) * 100)).toFixed(0) +  '% OFF' }}</div>

NgStyle -> allows setting of inline styles based on typescript expressions like assign color : red if false else green, etc
<div class="ekart--product--in--stock" [ngStyle]="{fontWeight: 'bold', color: prod.is_in_inventory ? 'Green' : 'Red'}">{{prod.is_in_inventory ? "Available in Stock" : "Out of Stock"}}</div>

NgClass -> Sets a CSS Class dynamically on an HTML element based on ts expression, define [ngClass] = "{//ts expression and css assignment}"
<button [ngClass]="{'btn': true , 'btn-search': searchText, 'btn-search-disabled': !searchText}">Search</button>
'btn': true -> assign btn class irrespective of any condition
 'btn-search': searchText -> assign btn-search class when searchText has value, searchText is string, so if it has value, it will be true
 'btn-search-disabled': !searchText -> assign btn-search-disabled class when searchText does not have value, searchText is string, so if its empty, it will be false
Each of these classes are expecting boolean values, in Typescript, null,undefined,'',false,0 are treated as false in boolean rest all is true.

@Input and @Output
ngFor and ngIf cannot be applied to the same element simultaneously, hence wrap element in div and assign one of them to it i.e. 2 Structural directives cannot be applied to a single html element.

@Input is from Parent to Child, define a value in child component using @Input decorator and use property binding with that value in parent component html
So in child,
@Input()
product: string = ''
and in parent
<div [product] = "prod">
 
@Output is from Child to Parent, define 
For @Output, define a variable with EventEmitter data type.

Passing data between sibling components:
Pass from sibling to parent using @Output and then pass from Parent to other sibling using @Input decorator

Template reference variable:
It can be applied on a DOM, Directive or Component
use #anyName and this would hold reference to that html element
<input type = "text" [(ngModel)] = "searchText" #searchInputText>
you can pass this #searchInputText as a parameter without #, eg: OnSearch(searchInputText) and searchInputText would hold the template reference of input element, so searchInputText.value would hold the value inside textbox same like event.target.value

============================================================================================================================================================
QnA
============================================================================================================================================================

# Object.entries
It returns key value pair of an object, which we can use during iteration for eg: 
let object1 = {
  a: 'somestring',
  b: 42,
};

for (let [key, value] of Object.entries(object1)) {
  console.log(`${key}: ${value}`);
}

// Expected output:
// "a: somestring"
// "b: 42"

Object.entries(object1) will return  [[1,'something'],[b,42]]

# Why implementing OnInit is not compulsory
TypeScript doesn't retain types on runtime as its converted to JS and JS does not have interface. So effect of implementing an interface is null and void during runtime. BUT implementing an interface gives you all the types / typos checking, so we still want to recommend it for TS users.Interfaces are a feature of TypeScript that allows us to define the structure or shape of an object and specify the properties and methods that an object has or should have. Their primary function is type checking and aiding developers in catching type-related errors during development.

# Model class should be interface or class
In most cases, interface should be enough, except if we need some constructor,methods or require some other logic, however both are acceptable.
Interfaces are used in Typescript to perform type-checking, they are here until the transpilation and disappear in the production. Also Interface cannot be used to instantiate. Classes came from ES6 are also used for type-checking, but they stay after transpilation and generate code in the production. Also, they are used to instantiate.
So, basically, Interface is useful if we don’t need them in production, if we only need to type-check. On the opposite, Class are here if we need them in production, particularly for the instantiation.

# Do we need to unsubscribe from an observable
HTTP, Router(ActivatedRoute) and rxJS takes care of unsubscribing, anything else, its a good idea to create a subject(onDestroy$) and take all the subscribers until onDestroy$ is active using the rxjs pipe takeUntil(). In the ngOnDestroy than you emit true in the onDestroy$ subject and unsubscribe from it.
https://stackoverflow.com/a/70093408
https://stackoverflow.com/a/70093229

#Whats a callback (https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/)
We can pass functions as parameters to other functions and call them inside the outer functions, this is called callback. JavaScript runs code sequentially in top-down order. However, there are some cases that requires code to run async. The way to create a callback function is to pass it as a parameter to another function, and then to call it back right after something has happened or some task is completed. setTimeout is an example, find,filter are alos examples of anonymous, callback functions.
const message = function() {  
    console.log("This message is shown after 3 seconds");
} 
setTimeout(message, 3000);

# hasOwnProperty()
The hasOwnProperty() method returns true if the specified property is a direct property of the object — even if the value is null or undefined. The method returns false if the property is inherited, or has not been declared at all. So if property exists in object, true else false. obj.hasOwnProperty("propNm")

# ExhaustMap
ExhaustMap always waits for the inner observable to finish. It ignores any value it receives from the source during this period. Any value it receives after the inner observable is finished is accepted and it creates a new inner observable. 
eg: Consider an obs on a btn click, and inside its subscription, we return another observable which is just going over array elements. If we click btn 5 times continuously, for every click until inner observable is completed(array elements are printed), observable for next click does not begin.  
https://www.tektutorialshub.com/angular/using-exhaustmap-in-angular/

# Why Router getCurrentNavigation always returns null
Access it inside constructor not ngOnInit and we should be good,  read: https://stackoverflow.com/a/75150492

# Rest vs Spread operator: (https://www.geeksforgeeks.org/what-is-the-rest-parameter-and-spread-operator-in-javascript/)
Spread:
var array1 = [10, 20, 30, 40, 50];
var array2 = [60, 70, 80, 90, 100];
var array3 = [...array1, ...array2];	//[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
var array3 = [...array1, 60,70]	//[10, 20, 30, 40, 50, 60, 70]

const obj1 = { a: 1, b: 2 };
const obj2 = { b: 3, c: 4 };

// Merge objects using spread operator
const mergedObj = { ...obj1, ...obj2 };
console.log(mergedObj); // Output: { a: 1, b: 3, c: 4 }

// Clone an object using spread operator
const clonedObj = { ...obj1 };
console.log(clonedObj); // Output: { a: 1, b: 2 }

Rest:
In functions when we require to pass arguments but were not sure how many we have to pass, the rest parameter makes it easier.
function function_name(...arguments) {
    statements;
}

function average(...args) {}
average(1,2,3,4,5,6,7) //All these 7 elements will be added in array and assigned to args