Angular is a JS Framework which allows to create SPA.
In earlier frameworks, whenever user navigated to a new page, a request was sent to server and based on URL, specific HTML was sent back. With SPA, there's only 1 HTML file being shown all the time namely index.html, only content inside it change as JS is loaded dynamically, no request to server made. This results in faster page load and reactive, if data is required from server, request can be made without making web page unresponsive, once data is loaded, display it. 
Node JS and Angular CLI are required for Angular to run.

Commands:
Create a folder where you want to contain the project and open that in VS Code
ng new angular-ekart	//creates a new angular project
cd .\angular-ekart 	//switch to new folder created by Angular for eKart project
ng serve		//compiles Angular project, generates bundles for JS and CSS FILES AND OPEN LIVE DEV SERVER
ng build		//Builds angular project and generatesa folder named dist, it has an index.html which lists all the static js bundles generated 			dynamically on ng serve, ex: main.js(js compiled verison of ts), runtime.js (web pack application), pollyfills.js(bckwrd 				compatible), vendor.js (angular core and other 3rd party libraries bundled in js), styles.css (bundles into styles.js)

When ng serve is executed, it runs index.html file on web server, and injects few bundles such as runtime.js and main.js in script tag, can be seen by rt click -> view page source in browser


Angular Files and Folder Structure:
Node modules -> Third party libraries to be used in project, neither we deploy to Prod nor push it in Git repo, anyone who needs it within team use npm install.
package.json -> Has 2 sections, dependencies -> specifies all 3rd party libraries required in project, devDependencies -> dependencies required for development in angukar like cli, jasmine, typescript, etc. npm install looks here to identify what needs to be installed.
.editorconfig -> Define coding standards rules.
.gitignore ->  Files/Folders to be ignored while pushing to git
angular.json -> All the information about current angular project such as styles, scripts, index html file location, etc 
package-lock -> Ensures same version of libraries are getting installed in all the libraries
tsconfig -> Settings for Typescript compiler to run angular project
src/assets -> All static files such as images, text, icons, etc and they are public in nature so can be accessed by browser. Keep all public things here.
favicon.ico -> The icon rendered in browser tab, replace it with your projects icon.
main.ts -> starting point of Angular application, bootstraps app Module
styles.css -> global css files to be declared here.

Angular Starting point:
Angular CLI uses WebPack which is a bundler to scan for JS and other files in our application and merges them into one or more bundles. Then it injects them into index.html. This ensures by the time index.html is loaded in browser, all 3rd party libraries and angular core libraries are also bundled and loaded. (see ng build section under commands)  
Defined in angular.json -> options -> main which points to main.ts (see img Angular app staring point)
App.module.ts has arrays like:
decalarations -> all the components, directives, pipes, etc are added here.
imports	-> all the external modules required by app.module
providers -> all the services are registered here
bootstrap -> which components angular should load when app module is loaded

Component: 
Has a selector, template(direct HTML, messy, compile time error can't be caught) or templateUrl and styles or stylesUrl.
Any style applied on app.component.html will not get applied on header.component.html as styles are applied at folder level.
For external fonts to be added, use @import.... code in syles.css which can be obtained from google fonts, same goes for font-awesome
To use bootstrap, first install and save it using npm install --save bootstrap  (use @vesrionNo just after bootStrap without space for downloading a specific version), installation can be verified from noe modules folder . Then add it either in styles.css using import statement or in angular.json, styles array by adding path of bootstrap.min.css file, this makes bootstrap available for styling. Ensure you run the app again before using bootstrap as app needs to be built for bootstrap library to be available. (Lecture 11)

Selector:
Selector in a component can also be used as an attribute or a css class or an id.
For it to be used as an attribute, define it in [] like selector: '[top-header]', now instead of html element it acts as an attribute like 
<div top-header></div>
For it to be used as a css class, define it with a . like selector: '.top-header', now instead of html element it acts as a class like 
<div class = "top-header"></html> ; similarly for id, use #
Selector is always used as an element in angular, above is just for knowledge. However, for directives, it acts as attribute.


Data Binding:
One way data binding: String interpolation, data and event binding 
Two way data binding: [(ngModel)]
Sting Interpolation: used to display some data in html
Data binding: used to display dynamic content in html, like img [src] = "path", instead of [], can also use bind-, like bind-value or bind-disabled however its not used much. There are some attributes(see img) which cannot be used in property binding like aria-hidden,colspan, etc., for them use attr keyword like [attr.aria-hidden]="". string interpolation cannot be used for disabled, hidden, checked, hence data-binding used there.
In order to use NgModel, we need to import FormsModule in app.module.ts in "imports" array
For one way data binding, check the commit one way data binding as file is altered after that, this commit has mobile example with cart inc/dec

Directives:
It is used to manipulate DOM, Chnage appearance or behaviour and to add/remove elements from DOM.
3 Types:
1. Component: It is the only type which has a view template associated with it, decorated with @Component decorator.
2. Attribute: Can be added as an attribute like ngClass and ngStyle, it is used to change the appearance or behaviour of elements in DOM, can be used along with a conditional statement, one can also create a custom directive. Need to declare using @Directive declaration with selector specified in square brackets as its an attribute
@Directive({
selector : '[changeToGreen]'
})
Then in HTML, can use as an attribute like <div changeToGreen></div>
3.Structural Directive: These are used to add/remove element from DOM, always has a * before directive name, common ones include *ngFor, *ngIf, [ngSwitch]

<a *ngFor = "let menu of mainMenuItems" href = "#">{{ menu }}</a>
<div class="ekart-on-sale-tag" *ngIf="prod.discountPrice">{{ (100 - ((prod.discountPrice / prod.price) * 100)).toFixed(0) +  '% OFF' }}</div>

NgStyle -> allows setting of inline styles based on typescript expressions like assign color : red if false else green, etc
<div class="ekart--product--in--stock" [ngStyle]="{fontWeight: 'bold', color: prod.is_in_inventory ? 'Green' : 'Red'}">{{prod.is_in_inventory ? "Available in Stock" : "Out of Stock"}}</div>

NgClass -> Sets a CSS Class dynamically on an HTML element based on ts expression, define [ngClass] = "{//ts expression and css assignment}"
<button [ngClass]="{'btn': true , 'btn-search': searchText, 'btn-search-disabled': !searchText}">Search</button>
'btn': true -> assign btn class irrespective of any condition
 'btn-search': searchText -> assign btn-search class when searchText has value, searchText is string, so if it has value, it will be true
 'btn-search-disabled': !searchText -> assign btn-search-disabled class when searchText does not have value, searchText is string, so if its empty, it will be false
Each of these classes are expecting boolean values, in Typescript, null,undefined,'',false,0 are treated as false in boolean rest all is true.

