Constructor:
A constructor of a component is the first thing that gets initiliazed, if not specified explicitly, default one gets called. Parent constuctor is called before child constructor.
@Input/Child elements/Projected contents are not available in constructor of a component.
Lifecycle hooks are the methods that angular invokes on a component/directive as it creates/modifies/destroys them.

Change Detection Cycle:
Angular change detection runs whenever @Input property is changed or DOM event happens (click or change) or setTimeOut()/setTimeInterval() is called or http request is made. It is mechanism by which view template and component class are kep in sync with each other.

ngOnChanges:
It executes whenever new component is created and its input bound property is changed/updated, it executes every time a change to input property is identified, if input bound property is not changed, its not called. So if some value entered in textbox is sent as input property to child component on btn click, and if afterentering text "Hello", we click on btn, ngOnChanges will be called, but if we click button again, since text is same and no change in input bound property is observed, ngOnChanges wil not be called out this time around.
When an array is passed as an input to child component, ngOnChanges will be called only when the reference to the array element is changed, if an element is added/removed from array, ngOnChnages is not called.  

ngOnInit:
Called only once, when a component is created and its input property is updated. By the time this is called, none of its Child/Projected components are avaliable to use.

ngDoCheck:
This is called on every change detection cycle. Write a logic here to run on every change detection cycle or a custom change detection logic which runs if angular fails to check any input bound properties.

ngAfterContentInit
Called only once
Called after component's projected content has been fully initialized.
@ContentChild/@ContentChildren is initialized just before this hook.
It gets called (one time) even if there is no projected content.

ngAfterContentChecked
Gets called only after projected content is initialized/checked/updated.
Called on every change detection cycle hence even if projected content does not change, it gets called.
Angular updates properties decorated with @ContentChild/@ContentChildren just before this hook.
ngAfterContentInit and ngAfterContentChecked are available only for components not directives.

ngAfterViewInit
It gets called only after components view template and its child components view template are fully initialized.
Angular updates properties decorated with @ViewChild and @ViewChildren just before raising this hook.
This gets called only once during first chnge detection cycle when angular initializes view for the first time.
By the time this hook gets called, all the lifecycle hooks of child components and its directives are completely processed and its child component are completely ready.
Called only once and it is component only, not applicable for directives.

ngAfterViewChecked
Gets called on first change detection cycle and every change detection cycle henceforth.
Its a component only hook, rest all the points of ngAfterViewInit are applicable here as well

Q. If ngDoCheck runs on every change detection cycle, why do we have ngAfterContentChecked and ngAfterViewChecked?
A. ngAfterContentChecked runs only after projected content has been initialized, hence for any change detection before that, we need ngDoCheck.
Also, under ngAfterContentChecked, we can compare previous view and current view(after content projection). Same is applicable for ngAfterView.

ngOnDestroy
Called just before a component or directive is destroyed. Right place for clean up work like unsubscribe observables/ detach event handlers, etc. Last hook of a component/directive.

NOTE:
ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked are available only for components not directives. This is because directives do not have a view of itself. These lifecycle hooks are related to rendering views...right? But a directive does not have a view.

It is a good practise for a class to implement this Lifecyle hook and import it from module like:
export class DemoComponent implements OnChanges, OnInit, AfterViewInit, etc...

Q. When ngOnDestroy() is called, ngDoCheck() is not called, why? (NEEDS REVIEW)
A. I think because the ngOnDestroy() is called when the component is destroyed, and when the component is destroyed the ngDoCheck() does not detect anything in that component to check if it changed or not, simply because it is removed from the dom.