Directive:
CLI cmd: ng g d SetBackground
Angular directive gets assigned as an attribute to a template element.
It has filename as SetBackground.directive.ts

Directive class needs to be decorated with @Directive attribute and selecto should specify name in square brackets like:
@Directive
export class setBackground 
(
    selector: [setBackground]
){}

When a directive is assigned to a template element, reference of that element gets passed on to the constructor of directive as a parameter. User can manipulate the element as a template reference variable by using it.

Directive must be declared in the declarations array

Renderer2:
Direct DOM Manipulation has security risks (see img Why Renderer2)
Renderer2 allows us tom manipulate DOM without accessing DOM elements directly, it provides a layer of abstraction between DOM Elements and component code.
It has lots of pre-defined classes that allow you to update DOM Elements.
Access Renderer2 class as a parameter in constructor.
constructor(private element: ElementRef, private renderer: Renderer2) --> this creates a private variable name element of type ElementRef and assigns whatever value gets injected(template reference variable), this removes the need of declaration above and assingment done inside constructor.

HostListener:
Using host-listener, we can listen to an event on host element(like div, p, etc) and react to that event by writing an event handling function(like mouseout, mouseenter, etc). This event handler can have custom code like zooming element, etc.
@HostListener('mouseenter') OnMouseEnter() {} 

HostBinding;
@HostBinding('style.backgroundcolor') backgroundClr : string = 'white'
Host Binding binds host element property(element on which the directive is added) to the property of a component/directive class.
can manipulate like this.backgroundClr = 'red' on mouseover/mouseleave.

Property Binding in Directives:
1. Dynamically assign values to renderer instance by assigning angular properties value to color/backgroundColor text. Decorate them with @Input and use them with square brackets in the DOM where directive is assigned.  
If the same property is avaiable in directive and as an attribute of DOM element (eg: title), angular looks for the property of directive first and assigns it. If no match found, it looks if an attribute exists for DOM (eg: is title a valid attribute for span), if yes, it assigns it.

2. Define an input property with an alias same as selector name. Create an object which holds 2 properties, backgroundColor and textColor for example. Assign this object in a syntax similar to ngClass in html like [directive] = "{prop1: 'val1', prop2: 'val2'}".
See checkin (Directive Property Binding - 2)

Conditional Attribute Directive:
This allows attribute to work based on a condition. For this, we add input property with same name as directive and use a set keyword with that property. This allows the property to be accessed as a method and write a functional logic inside it. This property can also receive a value by property binding directive and passing value same as we do for parent child data transfer. Set can accept one parameter.
@Input() set disableProduct(disable){
    if(disable){ //logic here }
}

Custom Style and Class Directive: (See checkin Custom class and style)