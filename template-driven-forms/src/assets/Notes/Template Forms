#Template Driven Forms:
Import Forms Module for the form will be treated as template driven.
Change the button on form to type = "submit" and add (ngSubmit) to form element.
Add template reference variable to ngForm and assign ngForm to it like #formRef = "ngForm", this will allow form to be accessed as json in component class.
Access form element using ViewChild and assign type as ngForm, this value can be read on button click.
At this moment, controls and values object will be empty in ngForm object.

#For controls to be created in ngForm:
Add a name to each element.
Assign ngModel attribute to each of them. This will create controls with name specified.
Form has values array which contain values against each form element.
It also has FormControls which contains properties such as dirty, touched, valid, etc.

#Form Control properties:
If an element is focused, touched is true else untouched is true.
If value is changed, dirty is true else pristine is true.
If value is valid, valid is true else invalid is true.
For a form, if any element is dirty, entire form is dirty, same goes for any other property like valid/invalid/pristine/touched/unctouched.

#Form Validation:
If there are few elements with required attribute, and even if any one of them does not have value, form's valid attribute would be set to false. So button click can be enabled/disabled based on form's validity
For email validation, just add email keyword to input element, it will take care of regex by itself.
As ngModel attribute is already added, assign it to template reference variable of each element like: #fname = "ngModel", then access this fname to get valid and other form control properties which will be used with ngIf to decide when to show error message.
<div *ngIf="fname.invalid && fname.touched">
    <small>*First Name is required</small>
</div>