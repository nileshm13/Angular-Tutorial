Reactive Forms:
Import ReactiveFormsModule in app.module.ts

Setting up form:
In HTML: For form element, assign [formGroup]="employeeForm", for form controls(fields), use formControlName="fname", formControlName="lname", etc.
In TS: Create a variable of type FormGroup, inside it would be a key value pair of form Controls with null as deafult value. If default value needs to be specified like CountryName/Gender selected on page load, define that instead of null like -->  country: new FormControl('India'),
eg:  this.employeeForm = new FormGroup({
      fname: new FormControl(null),
      lname: new FormControl(null)})

Validations:
In TS: 2nd param of FormControl object is validators, it contains required, email, max, min, etc.
If more than one validator needs to be specified, it should be specified in array like: new FormControl(null, [Validators.required, Validators.email])
There is an errors property on each form control which lists all the errors. It has keys like required, email, etc.
Ti display error msg in HTML, use get('formControlName') like ngIf="employeeForm.get('fname').invalid
FormGroup has its own valid and other properties like FormControls, form submission using button can be controlled using FormGroups valid property.

FormGroup:
For FormGroup, place entire section in a container like div.
Create a FormGroup inside main FormGroup with a name (eg: address)
Assign FormGroupName = "address" in HTML to div element.
Now, we can add validation based on entire group section.

FormArray:
Similar to FormGroup, just that here each element is an array instead of key value pair.
Create a FormArray object inside of FormGroup eg: skills.
Assign formArrayName = "skills" to the div.
Inside div, create another div or container which iterates over elements of FormArray.
Inside ngFor, create a control like input which should have a formControlName = "i" assigned where i = index of ngFor iteration.

Add/Remove element to FormArray:
this.employeeForm.get('skills') where skills is a FormArray has return type of AbstractControl which includes FormControl,FormGroup, FormArray. To add an element we need to push and to remove using an index, we need removeAt. These extensions are not available under AbstractControl, so we typecast and use it like:
(<FormArray>this.employeeForm.get('skills')).push(new FormControl(null));
(<FormArray>this.employeeForm.get('skills')).removeAt(index);

Custom Validators:
They are of 2 types: Sync and Async, by default, angular does not have async validators. Async validators returns Observables/promise.
Validator is basically a static method which contains logic for validating input. This can be used with form element.
See Async Validator.png
Each Control has errors property, look out for this to see if any error logged. New validators error property will be added here as well.
Async validators are added as 3rd param of Form Control, so FormControl

valueChanges and stateChanges:
Both are applied to FormControl,FormArray and FormGroup.
valueChanges returns an observable whenever there is a change in value of a FormControl/FormGroup/FormArray. Just get by id any FormControl/FormArray/FormGroup, and subscribe to valueChanges. The value gets logged.
this.reactForm.get().valueChanges.subscibe((res)=>{console.log(res)})

stateChanges gets called whenever state of FormControl/FormArray/FormGroup changes, there are 3 validation states, valid/invalid/pending. Its an observable as well. The state gets printed on subsciption. Status of a FormGroup is valid only if all the FormControls inside it are valid, it is invalid/pending if even one is pending/invalid. Add an ngClass to a form and add a border around it based on valid state to test it.

setValue and patchValue:
It can be used on a FormControl/FormGroup/FormArray. It is same as template driven form, just 2 changes:
1. When using patchValue, we dont need to specify .form, can access directly like this.reactForm.patchValue({username: usrName}) 
2. When using setValue on formControl, we can specify value directly as its a FormControl(element), like this.reactForm.get('email').setValue(usrname);
3. Use setValue on a FormControl if only a single control needs to be changed, use it on formGroup entirely is multiple fields need to be updated.

Retreiving form data:
Create an empty object and assign it this.reactForm.value on submit.
Reset is same , this.reactForm.reset(), if we want some values set after reset, pass the entire object as we do in setValue inside of reset(value_goes_here)