Routing:
1. For routing, first define a routes array of type Routes which is imported from library @angular/router.
2. Register that route in imports array using RouterModule.forRoot(routes), ForRoot here specifies the routes specified in array are for entire application
3. Each array element contains 2 properties, path and component
4. If we want to redirect to a component, specify like {path: '', redirectTo: 'Home', pathMatch: 'full'}, this means when a default route is reached(localhost:4200 in our case), redirect to HomeComponenet's url (localhost:4200/Home)
5. ** is a wild card route which matches every route path, so if no matching route found, the component specified for wild card route gets called. Wild card routes must be specified at the end of all predefined routes else wild card route will get called instead of actual specified route.
6. Specify <router-outlet></router-outlet> in app-component to tell angular that this is a dynamic component and it will show different component based on which route gets matched. Generally we specify it between header and footer so that those remain constant whil middle section of the page changes.

RouterLink:
1. In order to integrate routing with <a> tag i.e. for redirection when clicked on navigation link, we make use of routerLink
2. routerLink is a directive that binds HTML element to a route. When the HTML element on which we have used routerLink is clicked, it results in navigation to that route.
3. routerLink is an attribute directive so we can pass additional parameters to it.
4. <a routerLink = "Home">HomePage</a> --> When HomePage is clicked on navigation bar, find route that matches Home and navigate to its component
5. As its an attribute, we can specify it in square brackets, but it will expect a ts expression, hence define the route in single quote like: <a [routerLink] = "'Home'">HomePage</a>
6. When link is specified using anchor tag, the page reloads on every navigation resulting in all css/other files getting fetched time and again, with routerLink, only the view changes and only new files gets asked from server resulting in an SPA beaviour and less load on every request.

Absolute vs Relative Path:
Absolute path is defined using / before path in routerlink. An absolute path means link specified will get appended to root url.
Relative path is defined by directly specifying link in routerlink. A relative path means link specified to current url.
Example:
Lets say current url is localhost:4200/Courses and in html of courses component:
If we use routerLink = '/python', it will search and redirect to route : localhost:4200/python
If we use routerLink = 'python', it will search and redirect to route : localhost:4200/courses/python

While specifying routing in router.module.ts, we use relative path, still it acts as absolute, why? Eg: If we navigate to home component and then to courses component, it gives localhost:4200/courses not localhost:4200/home/courses
A: This is because it is relative to current url, when we are in home component and routerlink is specified in its html, it will take current route and append to it, but when we are in router.module.ts, it is not any component but a module so relativity is wrt root url i.e. localhost:4200

routerLinkActive and routerLinkActiveOptions:
1. routerLinkActive is used to specify CSS classes for active link so that it stands out from other links in navigation.
[routerLinkActive]="'active-route'" -> active-route is the css class
2. The only problem is it will highlight all the parent routes as well. So if routerLinkActive is specified for localhost:4200/courses/python, it will apply css class for both links localhost:4200/courses and localhost:4200/courses/python . in order to solve this issue, we have another attribute [routerLinkActiveOptions]="{exact: true}" which ensures exact route is only marked as active.
 
navigate, navigateByUrl and activatedRoute:

//Its absolute. It accepts an array where we specify each route to be navigated so for localhost:4200/courses/python/3.5 , we specify this.route.navigate(['courses','python','3.5']); 
// this.route.navigate(['courses']);
// this.route.navigate(['courses','python','3.5']);

 //Its absolute. It accepts a string where we specify the link to be directed to, so for localhost:4200/courses/python/3.5 , we specify this.route.navigateByUrl('courses/python/3.5');
//this.route.navigateByUrl('courses');
//this.route.navigateByUrl('courses/python/3.5');

//Both of above are absolute in nature by default but we can use navigateByUrl and provide relativeTo to provide redirection relative to a current url
//relativeTo accepts type activatedRoute which specifies current url.
//To get current url, use ActivatedRoute --> currentURL: ActivatedRoute = inject(ActivatedRoute);
this.route.navigate(['courses'], {relativeTo: this.currentRoute }); //This will redirect to http://localhost:4200/home/courses

Route Parameters:
Thye are dynamic part of route, i.e. route that can change, for example id, they are specified using :varName like:
localhost:4200/author/:authorName
localhost:4200/books/:id
localhost:4200/books/:isbn/:id  //We can specify multiple as well

Reading Route params value:
currentRoute: ActivatedRoute = inject(ActivatedRoute);
this.courseId = this.currentRoute.snapshot.params['id'];  //old way of retreiving route params
this.courseId = Number(this.currentRoute.snapshot.paramMap.get('id')); //newer and preferred way, returns string

Above methods will not work in real time as ngOnInit is called only once,so courseId will be set only once, after this, if user navigates to next/prev page using buttons, courseId value will be incorrect and so page rendering will not change, just the url will change as its handled in html, to handle this, we use observables as below, this will emit 
a new value on every page change and the subscription method will be called where logic on page change can be taken care of, follow below method henceforth:
 
this.currentRoute.paramMap.subscribe((data)=>
{
  this.courseId = Number(data.get('id'));
  this.selectedCourse = this.courseService.courses.find(crs => crs.id === this.courseId);
});

QueryParams:
1. Optional data in a route, of not specified, it does not stop angular from navigating to that route.
2. It must always be defined in view template or component(using route.navigate), can;t be specified in router.module.ts
routeParams are mandatory, they help to determine the route and are a part of route definition
3. In view template, specify route in [routerLink] and [queryParams]="{search: searchText}", this will have ?search=searchText_Value
4. We can specify similarly in component using route.navigate like: this.route.navigate(['courses'], { queryParams: { search: this.searchText } });
5. Read queryParams: 
this.currentRoute.queryParamMap.subscribe((data) => {
  this.querySearchText = data.get('search'); 
});

Fragments:
1. It is used to redirect to a specific section of an HTML page, like Home page has Search, Popular, Testimony, Services, COntact. All these are part of HomeComponent, but each specified using a specific id in html file.
2. To link fragments, go where navigation links are specified and there along with routerLink, provide fragments property which accepts a string value, this string should be html id of section we want to reDirect to.
3. Reading fragment name -> inside ngOnInit -> 
this.currentRoute.fragment.subscribe((data) => {
  if (data) {
    document.getElementById(data).scrollIntoView({ behavior: 'smooth' });
  }
});

Child routes:
To specify them, path property will have parent component's route and there will be a children array property each of which has path and property.
{
  path: 'courses', children: [  //this path should match route of parent
    { path: 'course/:id', component: CourseDetailComponent },
    { path: 'popular', component: PopularComponent }
  ]
}

Defining routing module:
Add a class : RoutingModule, decorate with @NgModule({}) decorator and inside it provide imports array(RouterMoudle.forRoot(routes) to register the routes) and exports array(RoutingModule to make it visible to other modules so that app.module.ts can import it)

Below are from vide 105 and 106:
//There are a lot of events that gets fired when we navigate from one route to other, we can use these events to decide if we want 
// to perform an action of not, for example, stop loading spinner when: page is loaded/ there's an error on page/ page load is cancelled.
//These events are accessible under Router library

this.router.events.subscribe((navEvent) => {
  if (navEvent.type == EventType.NavigationStart) {
    this.showSpinner = true;
  }

  // navEvent instanceof NavigationEnd      
  if (navEvent.type === EventType.NavigationEnd || navEvent.type === EventType.NavigationCancel || navEvent.type === EventType.NavigationError) {
    this.showSpinner = false;
  }
})